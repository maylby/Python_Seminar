''' 
Знакомство с языком Python (семинары)
Урок 4. Словари, множества и профилирование 
'''
# https://gb.ru/lessons/391155



""" Задача 3 (20) """ 

"""
В настольной игре Скрабл (Scrabble) 
каждая буква имеет определенную ценность. 
В случае с английским алфавитом очки распределяются так:
"""
# ● A, E, I, O, U, L, N, S, T, R – 1 очко;
# ● D, G – 2 очка;
# ● B, C, M, P – 3 очка;
# ● F, H, V, W, Y – 4 очка;
# ● K – 5 очков;
# ● J, X – 8 очков;
# ● Q, Z – 10 очков.

"""
А русские буквы оцениваются так:
"""
# ● А, В, Е, И, Н, О, Р, С, Т – 1 очко;
# ● Д, К, Л, М, П, У – 2 очка;
# ● Б, Г, Ё, Ь, Я – 3 очка;
# ● Й, Ы – 4 очка;
# ● Ж, З, Х, Ц, Ч – 5 очков;
# ● Ш, Э, Ю – 8 очков;
# ● Ф, Щ, Ъ – 10 очков.

"""
Напишите программу, которая вычисляет стоимость введенного пользователем слова.
Будем считать, что на вход подается только одно слово, 
которое содержит либо только английские, либо только русские буквы.

ПРИМЕР 

(презентация): 
"""
# Ввод: ноутбук
# Вывод: 12

""" 
(autotest): 
"""
# k = 'ноутбук'
# 12

""" 
Вариант 1 
(Андрей Лопатько) 
"""
# w = input('Input word: ')
# word = w.upper() 

# dict_rus = {'АВЕИНОРСТ' : 1,
# 	        'ДКЛМПУ' : 2,
# 	        'БГЁЬЯ' : 3,
# 	        'ЙЫ' : 4,
# 	        'ЖЗХЦЧ' : 5,
# 	        'ШЭЮ' : 8,
# 	        'ФЩЪ' : 10}
# dict_en = {'AEIOULNSTR' : 1,
# 		   'DG' : 2,
# 		   'BCMP' : 3,
# 		   'FHVWY' : 4,
# 		   'K' : 5,
# 		   'JX' : 8,
# 		   'QZ' : 10}
# result = 0
# for i in word:
# 	for simbols, count in dict_rus.items() | dict_en.items():
# 		if i in simbols: result += count
# print(result)


""" Задача 1 (16) """
# https://autotest.gb.ru/problems/21?lesson_id=391154&_ga=2.8891701.1648384661.1703691758-1734585693.1703049693

""" 
Требуется вычислить, сколько раз встречается 
некоторое число k в массиве list_1.
Найдите количество и выведите его. 
"""

# # Пример:

# list_1 = [1, 2, 3, 4, 5]
# k = 3
# # 1

''' Решение:

Вариант 1 
(решение с применением метода 'count')
'''

# list_1 = [1, 2, 3, 4, 5, 3]
# k = 3

# print('list_1 =', list_1)
# print('k =', k)
# print(list_1.count(k)) # метод 'count', встроен в функционал Pyhton 


'''
Вариант 2 (алгоритмическое решение)
'''

# list_1 = [1, 2, 3, 4, 5]
# k = 3
# print('list_1 =', list_1)
# print('k =', k)

# count = 0
# for i in list_1:
# 	if i == k: count += 1
# print(count)



""" Задача 2 (18) """
"""
Требуется найти в массиве list_1 
самый близкий по значению элемент к заданному числу k и вывести его.
Считать, что такой элемент может быть только один. 
Если значение k совпадает с этим элементом - выведите его.
"""
# Пример:

# list_1 = [1, 2, 3, 4, 5]
# k = 6
# 5

''' Решение 

Вариант 1
(С-04; 00:17:40 - Андрей Лопатько)
'''

# n = int(input('Input quantity numbers: '))
# list_1 = [] # для сохранения созданного списка (массива)

# from random import randint # без "импорта" 'randint' функция не работает 
# for i in range(n):
#     list_1.append(randint(-10, 10)) # Если в промежутке (-10, 10) 
#                                     # заменить '-10' на другое число, то результат  
#                                     # поиска ближайшего числа к заданному числу 'k' 
#                                     # выдаёт ошибочные значения
# print(f'list_1 = {list_1}')

# k = int(input('k = '))

# min1 = abs(k - list_1[0]) # Функция 'abs()' возвращает 
# 			              # абсолютное значение заданного числа: 
#                           # 1) Целые числа — целочисленное абсолютное значение; 
#                           # 2) Комплексные числа — величина числа;
#                           # 3) Числа с плавающей точкой — абсолютное значение c плавающей точкой. 
# result = list_1[0]

# for i in range(1, len(list_1)):
#     if (k - list_1[i]) < min1: 
#         min1 = abs(k - list_1[i])
#         result = list_1[i]
#     if (k - list_1[i]) == min1 and list_1[i] != (min1 + k): 
# 	    result = ((min1 + k), list_1[i]) # Возврат двух значений, когда минимумы совпадают
# print(result) 



# 00:24:00

"""
Задача 3 (ДЗ-03)

Вариант 2 (Эллона Комарын...)
"""
# dict1 = {'АВЕИНОРСТ' : 1, # передача всех словарей (rus, en) одной переменной, 
# 	    'ДКЛМПУ' : 2, # изменил присвоение значений каждой отдельной букве,
#         'БГЁЬЯ' : 3,  # объединив буквы с одинаковым значением
#         'ЙЫ' : 4,
#         'ЖЗХЦЧ' : 5,
#         'ШЭЮ' : 8,
#         'ФЩЪ' : 10,
#         'AEIOULNSTR' : 1,
#         'DG' : 2,
#         'BCMP' : 3,
#         'FHVWY' : 4,
#         'K' : 5,
#         'JX' : 8,
#         'QZ' : 10}
# kol = 0
# # slovo = str.upper(input('Введите слово:\n'))  # строка рабочая, но форма записи не верная
# 					                            # 'str' (строка) писать не нужно, т.к.
# 					                            # 'input' - строка, по определению
# slovo = input('Введите слово:\n').upper() # рекомендованная форма записи,
#                                           # '\n' - перенос на новую строку 
# # print(dict1.get(slovo, 'no values')) # (?) 'no values' выводит постоянно, хотя 
#                                      # должен выводить, когда в слове 
# 				                     # есть отсутствующие в списке символы
# # # v1:
# # for i in slovo:
# # 	kol += dict1[i]
# # print(kol) # код работает, когда каждой букве отдельно 
# #            # присвоено конкретное значение:
# #            # {A : 1, B : 1, ..., и т.д.}
# # v2:
# for i in slovo: 
# 	for j in dict1:
# 		if i in j: kol += dict1[j]
# print(kol) 



# 00:37:00
"""
Задача №27. 
(Решение в группах)

Пользователь вводит текст(строка). 
Словом считается последовательность непробельных символов, идущих подряд, 
слова разделены одним или большим числом пробелов. 
Определите, сколько различных слов содержится в этом тексте.
"""
# Input: 
# She sells sea shells on the sea shore The shells
# that she sells are sea shells I'm sure.So if she sells sea
# shells on the sea shore I'm sure that the shells are sea
# shore shells

# Output: 13


''' Решение '''

# st = "She sells sea shells on the sea shore The shells"\
# "that she sells are sea shells I'm sure.So if she sells"\
# "nsea shells on the sea shore I'm sure that the shells are sea shore shells"
		
# print('Input:', st) # из текста нужно удалить повторяющиеся слова
# 			        # сначала пишем код выбора уникальных элементов
# str1 = st.replace('.', ' ').upper().split() # в видео 'upper' стоял перед 'split'
#                     # если, используя 'replace', в 'split' указать пробел (" "),
#                     # то он будет удалён, только 1 раз
#                     # 'replace' очищает текст от любых указанных знаков
#                     # 'split' разбивает текст на отдельные знаки, убирая пробелы (?)
#                     # найти алгоритм функции "split"
#                     # написать алгоритмическое решение задачи
# # print(str1) # демонстрация начального текста -> "[]"
# str1 = set(st)  # функция 'set' заменяет собой цикл, 
#                 # объединяя множества, т.е.,
# 	            # по сути, удаляя повторы слов
# # print(str1) # демонстрация конечного текста -> "{}"
# print('Output:', len(str1)) # 'len' - длина строки

# # Output: 19 


# # 01:01:00 
# Задача для самостоятельного из чата семинара
"""
Сергей Сердюк. 
На вход программе подаются две строки текста, 
содержащие по одному слову из перечня 
"камень", "ножницы", "бумага", "ящерица" или "Спок". 
На первой строке записан выбор Тимура, на второй – выбор Руслана.

Формат выходных данных
Программа должна вывести результат жеребьёвки: 
кто победил - Тимур или Руслан, или они сыграли вничью.

Примечание. Правила игры стандартные. 
Ножницы режут бумагу. Бумага заворачивает камень. 
Камень давит ящерицу, а ящерица травит Спока, 
в то время как Спок ломает ножницы, которые, 
в свою очередь, отрезают голову ящерице, 
которая ест бумагу, на которой улики против Спока. 
Спок испаряет камень, а камень, разумеется, затупляет ножницы.

Решение:
"""

# from pickletools import string1

# a=input() # ввод ключа (одно любое слово из игры) - 'камень', 'ножницы', 'бумага'
# b=input() # ввод второго ключа

# m = {'камень-камень': 'ничья', 'камень-ножницы': 'Тимур', 'камень-бумага': 'Руслан',
# 'камень-ящерица': 'Тимур', 'камень-Спок': 'Руслан', 'ножницы-ножницы': 'ничья',
# 'ножницы-бумага': 'Тимур', 'ножницы-камень': 'Руслан', 'ножницы-ящерица': 'Тимур',
# 'ножницы-Спок': 'Руслан', 'бумага-бумага': 'ничья', 'бумага-камень': 'Тимур',
# 'бумага-ножницы': 'Руслан', 'бумага-ящерица': 'Руслан', 'бумага-Спок': 'Руслан',
# 'ящерица-ящерица': 'ничья', 'ящерица-Спок': 'Тимур', 'ящерица-ножницы': 'Руслан',
# 'ящерица-бумага': 'Тимур', 'ящерица-камень': 'Руслан', 'Спок-Спок': 'ничья',
# 'Спок-ножницы': 'Тимур', 'Спок-бамага': 'Руслан', 'Спок-камень': 'Тимур',
# 'Спок-ящерица': 'Руслан'}

# string1 = a + '-' + b
# print(m[string1])


# 01:02:20
"""
Задача №25. 
(Общее обсуждение)

Напишите программу, которая принимает на вход 
строку, и отслеживает, сколько раз каждый символ уже встречался. 
Количество повторов добавляется к символам с помощью постфикса формата _n.
"""
# Input: a a a b c a a d c d d
# Output: a a_1 a_2 b c a_3 a_4 d c_1 d_1 d_2
"""
Для решения данной задачи используйте функцию
.split()
"""
# s = 'a a a b c a a d c d d'
# print('Input:', s)
# str1 = s.split()

# result = {} # пустые фигуpные скобки - это словарь
# 	        # словарь состоит из ключа и значения
# for i in str1: 
# 	if i not in result: # Смысл: 
# 		                    # Если (if) буква ещё не втречалась,   
# 		print(i, end = " ") # то печатать букву (ключ), 
# 		                    # 'end' (скрытый аргумент оператора 'print') 
#                             # производит запись в одну строку
# 	else: 
# 		print(f'{i}_{result[i]}', end = " ") # иначе (else), если буква повторяется, 
# 						                     # выводить ключ (i) и значение (result[i]                                
# 	result[i] = result.get(i, 0) + 1
	


# 01:03:50 
# (чат семинара)

# Задача для самостоятельного решения 
# (см. разбор задачи на следующем сминаре № 5)

"""		
Сергей Сердюк 
Вводятся номера телефонов в одну строчку через пробел 
с разными кодами стран: +7, +6, +2, +4 и т.д. 
Необходимо составить словарь d, где ключи - это коды +7, +6, +2 и т.п., 
а значения - список номеров, следующих в том же порядке, что и во входной строке, 
с соответствующими кодами. Полученный словарь вывести командой:
"""
# print(*sorted(d.items()))

# Sample Input:
# +71234567890 +71234567854 +61234576890 +52134567890 +21235777890 +21234567110 +71232267890
# Sample Output:
# ('+2', ['+21235777890', '+21234567110']) 
# ('+5', ['+52134567890']) 
# ('+6', ['+61234576890']) 
# ('+7', ['+71234567890', '+71234567854', '+71232267890'])


# 01:32:50 
"""
Задача 22: 
Даны два неупорядоченных набора целых чисел (может быть, с повторениями). 
Выдать без повторений в порядке возрастания все те числа, 
которые встречаются в обоих наборах.

Пользователь вводит 2 числа. 
n - кол-во элементов первого множества. 
m - кол-во элементов второго множества. 
Затем пользователь вводит сами элементы множеств.
"""
# 11 6
# 2 4 6 8 10 12 10 8 6 4 2
# 3 6 9 12 15 18
# 6 12